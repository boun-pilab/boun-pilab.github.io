<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      template="resources/template.xhtml">
    
    <ui:define name="content">
        <h:head>
            <title>Downloads</title>
            <style>
                #content {padding-bottom: 20px;}
            </style>
        </h:head>
        
        <h:body>
            <h1 align="center">DOWNLOADS</h1>
            <h2>PROT-LIG</h2>
            <h:form>
                <li><h:commandLink class="download_link" value="Download chembl.py" action="#{dataBean.download(1)}"/></li>
            </h:form>
            <p>
                <b>How To Use</b><br style="line-height: 25px;"/>

                The program can be executed by using command line. Some execution command examples:
                <ul class="code">
                    <li><i>python2 chembl.py insulin 9606 1000</i></li>
                    <li><i>python2 chembl.py sialidase 9606 3000</i></li>
                </ul>
            </p>
            <p class="note">
                <u>Note</u>: In order to execute <i>chembl.py</i>, python modules <b><i>bioservices</i></b> and
                    <b><i>chembl_webresource_client</i></b> must be installed at first. With the following commands,
                    these modules can be installed on Linux.
                <ul class="code">
                    <li><i>sudo python2 -m pip install bioservices</i></li>
                    <li><i>sudo python2 -m pip install chembl_webresource_client</i></li>
                </ul>
            </p>
            <p>
                <b>Input</b><br style="line-height: 25px;"/>
                
                It takes a protein name, an organism number and a threshold value as inputs.
                Values "insulin", "9606" and "1000" can be given as a sample input. 
            </p>
            <p>
                <b>Output</b><br style="line-height: 25px;"/>

                The output of this function is suitable to use as an input for Ligand Centric 
                Network Models package.These output includes three columns; orderly, 
                protein IDs, ligand IDs and SMILES strings. First lines of these insulin output 
                is given below.<br/>
            </p>
            <table class="download">
                <tr>
                    <td>DB ID</td><td> </td><td>Ligand ID</td><td> </td><td>Ligand SMILES</td>
                </tr>
                <tr>
                    <td>AKT1_HUMAN</td><td> </td><td>CHEMBL414139</td><td> </td><td>COc1cc2c(Nc3ccc(Oc4ccccc4)cc3)c(cnc2cc1OCCCN5CCOCC5)C#N</td>
                </tr>
                <tr>
                    <td>AKT1_HUMAN</td><td> </td><td>CHEMBL318804</td><td> </td><td>COc1cc2c(Nc3ccc(Sc4nccn4C)c(Cl)c3)c(cnc2cc1OCCCN5CCOCC5)C#N</td>
                </tr>
                <tr>
                    <td>AKT1_HUMAN</td><td> </td><td>CHEMBL260417</td><td> </td><td>Oc1ccc(cc1)c2nc3[nH]nc(NC(=O)C4CC4)c3cc2Br</td>
                </tr>
                <tr>
                    <td>....</td>
                </tr>
            </table>
            
            <h2 style="padding-top: 30px;">LIGAND-CENTRIC</h2>
            <h:form>
                <li><h:commandLink class="download_link" value="Download ligandcentricnetwork.jar" action="#{dataBean.download(2)}"/></li>
            </h:form>
            <h:form>
                <li><h:commandLink class="download_link" value="Download ligand_vectors.txt" action="#{dataBean.download(3)}"/></li>
            </h:form>
            <p>
                <b>How To Use</b><br style="line-height: 25px;"/>
                
                There is a jar file to run the application from command line. Java 1.8+ is required to run the application.
                <ul class="code">
                    <li><i>java -jar ligandcentricnetwork.jar input.txt 2</i></li>
                </ul>
            </p>
            <p style="text-indent: 0;">
                It takes a takes file and the number of the similarity calculation method as inputs. You have to choose a
                ligand similarity function, among (1) CDK's own similarity, (2) Lingo-based smiles-centric similarity function,
                (3) Smiles2vec (average) similarity function, (4) Smiles3vec (min-max) similarity function.<br/>
            </p>
            <p class="note">
                <u>Note</u>: <i>ligand_vectors.txt</i> is required in order to run with option 3 and 4. you should place it under the same folder with <i>ligandcentricnetwork.jar</i>.
            </p>
            <p>
                <b>Input</b><br style="line-height: 25px;"/>
                
                To use your own data, you should prepare it as the following input form in a text file,
            </p>
            <table class="download">
                <tr>
                    <td> </td><td>ProteinID</td><td> </td><td>LigandID</td><td> </td><td>SMILES</td>
                </tr>
                <tr>
                    <td> </td><td>ProteinID</td><td> </td><td>LigandID</td><td> </td><td>SMILES</td>
                </tr>
                <tr>
                    <td> </td><td>....</td>
                </tr>
                <tr>
                    <td style="font-size: 16px;">i.e.,</td>
                </tr>
                <tr><td> </td></tr>
                <tr>
                    <td> </td><td>P25910</td><td> </td><td>MES</td><td> </td><td>C1COCC[NH+]1CCS(=O)(=O)[O-]</td>
                </tr>
                <tr>
                    <td> </td><td>P0C5C1</td><td> </td><td>SFR</td><td> </td><td>C[C@H]([C@H]([C@@H]1NC(=C(S1)[C@H]2CCCO2)C(=O)O)C(=O)O)O</td>
                </tr>
                <tr>
                    <td> </td><td>P0AD64</td><td> </td><td>17O</td><td> </td><td>c1c2n(nc1C3C(=CNC(=CS3)C(=O)O)C=O)CSC2</td>
                </tr>
                <tr>
                    <td> </td><td>....</td>
                </tr>
            </table>
            <p style="text-indent: 0;">
                After preaparing your file, "input.txt", you should place it under the same folder with <i>ligandcentricnetwork.jar</i>.
            </p>
            <p>
                <b>Output</b><br style="line-height: 25px;"/>
                
                Outputs of the code are six different text files each containing a network table, w therefore they can be easily imported into Cytoscape.
            </p>
            <table>
                <tr>
                    <td>1.</td><td> </td><td>"ide_unw.txt",</td><td> </td><td>unweighted identity</td>
                </tr>
                <tr>
                    <td>2.</td><td> </td><td>"ide_wei.txt",</td><td> </td><td>weighted identity</td>
                </tr>
                <tr>
                    <td>3.</td><td> </td><td>"ide_norm_wei.txt",</td><td> </td><td>normalized weighted identity</td>
                </tr>
                <tr>
                    <td>4.</td><td> </td><td>"sim_unw.txt",</td><td> </td><td>unweighted similarity</td>
                </tr>
                <tr>
                    <td>5.</td><td> </td><td>"sim_wei.txt",</td><td> </td><td>weighted similarity</td>
                </tr>
                <tr>
                    <td>6.</td><td> </td><td>"sim_norm_wei.txt",</td><td> </td><td>normalized weighted similarity</td>
                </tr>
            </table>
            <p class="note">
                <u>Note</u>: Jar file uses CDK (Chemistry Development Kit) to compute similarity.
                (<h:outputLink value="https://github.com/cdk">
                    <h:outputText value="https://github.com/cdk"/>
                </h:outputLink>)
            </p>
        </h:body>
    </ui:define> 
</ui:composition>
